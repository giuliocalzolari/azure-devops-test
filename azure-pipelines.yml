# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- script: |
    apt-get install unzip
    wget https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip
    unzip terraform_0.11.8_linux_amd64.zip
    sudo mv terraform /usr/local/bin/
    terraform --version
  displayName: 'Install Terraform.'

- script: |
    AZ_REPO=$(lsb_release -cs)
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | tee /etc/apt/sources.list.d/azure-cli.list
    curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    apt-get update
    apt-get install apt-transport-https azure-cli
    az --version
  displayName: 'Install AZ Libraries.'

- script: |
    apt-get install jq
    jq --version
  displayName: 'Install dependencies'

- script: |
    ############### VARS ################
    STORAGE_ACCOUNT_NAME='ikeaterraformstatefiles'
    STORAGE_ACCOUNT_KEY='Xpx4Trp6HmZ+ERwkinrYDhVTzw0smmxwFNsFZYJ3rtNKIqdKHPTDaue0NSZLUsYwyXKibKVB1ltOXwPAOWiY3g=='
    REPO_PATH='tristanmetcalfe-cloudreach/azure-devops-test/Terraform'
    BASE_PATH=$(pwd)

    TERRAFORM_STACKS=($(az storage container list --account-name ${STORAGE_ACCOUNT_NAME} --account-key ${STORAGE_ACCOUNT_KEY} | jq ".[].name" -r))

    for CURRENT_TERRAFORM_STACK in "${TERRAFORM_STACKS[@]}"
    do
      echo "REPO_PATH = ${REPO_PATH}"
      echo "CURRENT_TERRAFORM_STACK = '${CURRENT_TERRAFORM_STACK}'"
      ls
      cd ${REPO_PATH}/${CURRENT_TERRAFORM_STACK}

      STATE_FILE=$(az storage blob list -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" | jq ". | length")
      STATE_FILE_EXISTS=$(az storage blob exists -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" --name terraform.tfstate | jq ".exists")
      STATE_FILE_BACKUP_EXISTS=$(az storage blob exists -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" --name terraform.tfstate.backup | jq ".exists")

      # Get Terraform state files
      if [ "$STATE_FILE_EXISTS" == "false" ]
      then
        terraform init
      else
        az storage blob download -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -f terraform.tfstate -n terraform.tfstate

        if [ "$STATE_FILE_BACKUP_EXISTS" == "true" ]
        then
          az storage blob download -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -f terraform.tfstate -n terraform.tfstate.backup
        fi
      fi

      # terraform apply -auto-approve

      # Delete old and put new Terraform state files back
      if $(ls | grep terraform.tfstate)
      then
        az storage blob delete -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -n terraform.tfstate
        az storage blob upload -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -f terraform.tfstate -n terraform.tfstate
      fi

      if $(ls | grep terraform.tfstate.backup)
      then
        az storage blob delete -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -n terraform.tfstate.backup
        az storage blob upload -c ${CURRENT_TERRAFORM_STACK} --account-name ${STORAGE_ACCOUNT_NAME} --account-key "${STORAGE_ACCOUNT_KEY}" -f terraform.tfstate -n terraform.tfstate.backup
      fi
      cd ${BASE_PATH}
    done
  displayName: 'Get current Terraform state files, apply changes, put back new state files'
